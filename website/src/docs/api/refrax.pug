---
title: Refrax
permalink: /docs/api/refrax.html
group: 1
layout: docs.pug
---

p `RefraxAction` is a mechanism to functionally represent a mutation to be performed on data.

p Refrax actions are created using <a href="/docs/api/refrax.html#createAction">Refrax.createAction</a>.

h2 Overview

p *Properties*

<ul class="list-properties">
  <li>
    <a href="/docs/api/refrax-config.html">
      <pre>
        span Config
        <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
      </pre>
    </a>
  </li>
  <li>
    <a href="/docs/api/refrax-mutable-resource.html">
      <pre>
        span MutableResource
        <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
      </pre>
    </a>
  </li>
  <li>
    <a href="/docs/api/refrax-resource.html">
      <pre>
        span Resource
        <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
      </pre>
    </a>
  </li>
  <li>
    <a href="/docs/api/refrax-schema-path.html">
      <pre>
        span Schema
        <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
      </pre>
      Root SchemaPath
    </a>
  </li>
  <li>
    <a href="/docs/api/refrax-store.html">
      <pre>
        span Store
        <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
      </pre>
    </a>
  </li>
</ul>

p *Methods*

ul.list-methods
  li
    a(href="#static-createaction")
      pre static createAction(method)
      Create an Action wrapper around a given method.
  li
    a(href="#static-defineschemacollection")
      pre static defineSchemaCollection(path[, store][, options])
  li
    a(href="#static-defineschemaresource")
      pre static defineSchemaResource(path[, store][, options])
  li
    a(href="#static-defineschemanamespace")
      pre static defineSchemaNamespace(path[, options])
  li
    a(href="#static-processresponse")
      pre static processResponse(data, resourceDescriptor[, handler])

h2.overview-methods Methods

dl
  dt.detail-method
    a.icon-anchor(href="#static-createaction" aria-hidden="true")
      i.fa.fa-link
    h3 static createAction(method)
  dd.detail-method-details
    p Create an [:action]() wrapper around a given method.
    
    aside
      h4 Parameters
      dl.detail-method-parameters
        dt.detail-method-parameter-name
          dfn.property-name method
          span.tag.tag-property
            != generate_resource_link(":function")
        dd.detail-method-description
          | The function to call upon action invocation with local context to an <code>!{generate_resource_link("+action")}</code>
    aside
      h4 Returns
      table.detail-table-parameters
        thead
          tr
            th.type Type
            th Description
        tbody
          tr
            td.type <a href="esri-geometry-ScreenPoint.html">ScreenPoint</a>
            td.description The screen point corresponding to the given map point.
            
  dt.detail-method
    a.icon-anchor(href="#static-defineschemacollection" aria-hidden="true")
      i.fa.fa-link
    h3 static defineSchemaCollection(path[, store][, options])
  dd.detail-method-details
    p Create an [:action]() wrapper around a given method.
    
    aside
      h4 Parameters
      dl.detail-method-parameters
        dt.detail-method-parameter-name
          dfn.property-name path
          span.tag.tag-property
            != generate_resource_link(":function")
        dd.detail-method-description
          p The function to call upon action invocation with local context to an <code>ActionInvoker</code>
        dt.detail-method-parameter-name
          dfn.property-name store
          span.tag.tag-optional optional
          span.tag.tag-property
            != generate_resource_link(":function")
        dd.detail-method-description
          p The function to call upon action invocation with local context to an <code>ActionInvoker</code>
        dt.detail-method-parameter-name
          dfn.property-name options
          span.tag.tag-optional optional
          span.tag.tag-property
            != generate_resource_link(":object")
        dd.detail-method-description
          p The function to call upon action invocation with local context to an <code>ActionInvoker</code>
    aside
      h4 Returns
      table.detail-table-parameters
        thead
          tr
            th.type Type
            th Description
        tbody
          tr
            td.type <a href="esri-geometry-ScreenPoint.html">ScreenPoint</a>
            td.description The screen point corresponding to the given map point.
      
  dt.detail-method
    a.icon-anchor(href="#static-defineschemaresource" aria-hidden="true")
      i.fa.fa-link
    h3 static defineSchemaResource(path[, store][, options])
  dd.detail-method-details
    p Create an [:action]() wrapper around a given method.
    
    aside
      h4 Parameters
      dl.detail-method-parameters
        dt.detail-method-parameter-name
          dfn.parameter-name path
          span.tag.tag-parameter
            != generate_resource_link(":function")
        dd.detail-method-description
          p The function to call upon action invocation with local context to an <code>ActionInvoker</code>
        dt.detail-method-parameter-name
          dfn.parameter-name store
          span.tag.tag-optional optional
          span.tag.tag-parameter
            != generate_resource_link(":function")
        dd.detail-method-description
          p The function to call upon action invocation with local context to an <code>ActionInvoker</code>
    aside
      h4 Returns
      p Returns [:action]().


h3 static defineSchemaResource(path[, store][, options])

p - `[method]` [:function]() A method to define a [:action]() surrounding.

p Returns [:action]().

h3 static defineSchemaNamespace(path[, options])

p - `[method]` [:function]() A method to define a [:action]() surrounding.

p Returns [:action]().

h3 processResponse(data[, resourceDescriptor][, handler])
